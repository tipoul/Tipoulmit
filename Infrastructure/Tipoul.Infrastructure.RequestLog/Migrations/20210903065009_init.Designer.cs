// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tipoul.Infrastructure.RequestLog.DataAccessLayer;

namespace Tipoul.Infrastructure.RequestLog.Migrations
{
    [DbContext(typeof(RequestLogDbContext))]
    [Migration("20210903065009_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.5.21301.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Query")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.RequestBody", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("RequestBodies");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.RequestCookie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestCookies");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.RequestException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("RequestExceptions");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.RequestForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestForms");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.RequestHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestHeaders");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.RequestInnerException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestExceptionId")
                        .HasColumnType("int");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequestExceptionId");

                    b.ToTable("RequestInnerExceptions");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.RequestQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestQueries");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.ResponseHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponseId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId");

                    b.ToTable("ResponseHeaders");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.RequestBody", b =>
                {
                    b.HasOne("Tipoul.Infrastructure.RequestLog.StorageModels.Request", "Request")
                        .WithOne("RequestBody")
                        .HasForeignKey("Tipoul.Infrastructure.RequestLog.StorageModels.RequestBody", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.RequestCookie", b =>
                {
                    b.HasOne("Tipoul.Infrastructure.RequestLog.StorageModels.Request", "Request")
                        .WithMany("RequestCookies")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.RequestException", b =>
                {
                    b.HasOne("Tipoul.Infrastructure.RequestLog.StorageModels.Request", "Request")
                        .WithOne("RequestException")
                        .HasForeignKey("Tipoul.Infrastructure.RequestLog.StorageModels.RequestException", "RequestId");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.RequestForm", b =>
                {
                    b.HasOne("Tipoul.Infrastructure.RequestLog.StorageModels.Request", "Request")
                        .WithMany("RequestForms")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.RequestHeader", b =>
                {
                    b.HasOne("Tipoul.Infrastructure.RequestLog.StorageModels.Request", "Request")
                        .WithMany("RequestHeaders")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.RequestInnerException", b =>
                {
                    b.HasOne("Tipoul.Infrastructure.RequestLog.StorageModels.RequestException", "RequestException")
                        .WithMany("RequestInnerExceptions")
                        .HasForeignKey("RequestExceptionId");

                    b.Navigation("RequestException");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.RequestQuery", b =>
                {
                    b.HasOne("Tipoul.Infrastructure.RequestLog.StorageModels.Request", "Request")
                        .WithMany("RequestQueries")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.Response", b =>
                {
                    b.HasOne("Tipoul.Infrastructure.RequestLog.StorageModels.Request", "Request")
                        .WithOne("Response")
                        .HasForeignKey("Tipoul.Infrastructure.RequestLog.StorageModels.Response", "RequestId");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.ResponseHeader", b =>
                {
                    b.HasOne("Tipoul.Infrastructure.RequestLog.StorageModels.Response", "Response")
                        .WithMany("ResponseHeaders")
                        .HasForeignKey("ResponseId");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.Request", b =>
                {
                    b.Navigation("RequestBody");

                    b.Navigation("RequestCookies");

                    b.Navigation("RequestException");

                    b.Navigation("RequestForms");

                    b.Navigation("RequestHeaders");

                    b.Navigation("RequestQueries");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.RequestException", b =>
                {
                    b.Navigation("RequestInnerExceptions");
                });

            modelBuilder.Entity("Tipoul.Infrastructure.RequestLog.StorageModels.Response", b =>
                {
                    b.Navigation("ResponseHeaders");
                });
#pragma warning restore 612, 618
        }
    }
}
