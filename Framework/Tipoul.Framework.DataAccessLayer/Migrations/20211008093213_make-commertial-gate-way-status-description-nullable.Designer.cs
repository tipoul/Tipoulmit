// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tipoul.Framework.DataAccessLayer;

namespace Tipoul.Framework.DataAccessLayer.Migrations
{
    [DbContext(typeof(TipoulFrameworkDbContext))]
    [Migration("20211008093213_make-commertial-gate-way-status-description-nullable")]
    partial class makecommertialgatewaystatusdescriptionnullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.5.21301.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tipoul.Framework.StorageModels.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Trashed")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("UserId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.BusinessCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BusinessCategories");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.BusinessSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessCategoryId");

                    b.ToTable("BusinessSubCategories");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.CommertialGateWay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessSubCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Settlement")
                        .HasColumnType("int");

                    b.Property<int>("SettlementPeriod")
                        .HasColumnType("int");

                    b.Property<string>("SupportPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TerminalNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WageSide")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.Property<string>("WebSiteURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSubCategoryId");

                    b.HasIndex("WalletId");

                    b.ToTable("CommertialGateWays");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.CommertialGateWayStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommertialGateWayId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommertialGateWayId");

                    b.HasIndex("UserId");

                    b.ToTable("CommertialGateWayStatuses");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.IdentityDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LegalProfileId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LegalProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityDocuments");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.IdentityDocumentStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentityDocumentId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdentityDocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityDocumentStatusHistory");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.LegalProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CommertialName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatitonalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegisterNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.Property<string>("WebSiteURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSubCategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("WalletId")
                        .IsUnique()
                        .HasFilter("[WalletId] IS NOT NULL");

                    b.ToTable("LegalProfiles");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.LegalProfileLogoHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LegalProfileId")
                        .HasColumnType("int");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LegalProfileId");

                    b.ToTable("LegalProfileLogoHistories");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.NotificationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("LinkClickDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SeenDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.SMSLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SMSLogs");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.TicketMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketMessages");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.TicketStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketStatusHistories");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BusinessSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobCityId")
                        .HasColumnType("int");

                    b.Property<string>("JobPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LegalProfileId")
                        .HasColumnType("int");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MobileNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSubCategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("JobCityId");

                    b.HasIndex("WalletId")
                        .IsUnique()
                        .HasFilter("[WalletId] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.UserAvatarHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAvatarHistories");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.UserCommertialGateWayRegisterRequestLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommertialGateWayId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<int?>("ErrorCode")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SepehrLoginId")
                        .HasColumnType("int");

                    b.Property<string>("SepehrLoginUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Service")
                        .HasColumnType("int");

                    b.Property<string>("TerminalNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCommertialGateWayRegisterRequestLogs");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.UserTaxRequestHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<int?>("ErrorCode")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FollowCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShahkarValid")
                        .HasColumnType("bit");

                    b.Property<int>("ShaparakServiceLodId")
                        .HasColumnType("int");

                    b.Property<string>("TprId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTaxRequestHistories");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.UserVerificationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DoneDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SeenDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShaparakRequestId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserVerificationHistories");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.UserVerificationHistoryError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserVerificationHistoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserVerificationHistoryId");

                    b.ToTable("UserVerificationHistoryErrors");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AmountSettlementable")
                        .HasColumnType("int");

                    b.Property<int?>("LegalProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WalletCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.BankAccount", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tipoul.Framework.StorageModels.User", "User")
                        .WithMany("BankAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.BusinessSubCategory", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.BusinessCategory", "BusinessCategory")
                        .WithMany("BusinessSubCategories")
                        .HasForeignKey("BusinessCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessCategory");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.City", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.CommertialGateWay", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.BusinessSubCategory", "BusinessSubCategory")
                        .WithMany()
                        .HasForeignKey("BusinessSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tipoul.Framework.StorageModels.Wallet", "Wallet")
                        .WithMany("CommertialGateWays")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessSubCategory");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.CommertialGateWayStatus", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.CommertialGateWay", "CommertialGateWay")
                        .WithMany("CommertialGateWayStatuses")
                        .HasForeignKey("CommertialGateWayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tipoul.Framework.StorageModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommertialGateWay");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.IdentityDocument", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.LegalProfile", null)
                        .WithMany("IdentityDocuments")
                        .HasForeignKey("LegalProfileId");

                    b.HasOne("Tipoul.Framework.StorageModels.User", null)
                        .WithMany("IdentityDocuments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.IdentityDocumentStatusHistory", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.IdentityDocument", "IdentityDocument")
                        .WithMany("IdentityDocumentStatusHistories")
                        .HasForeignKey("IdentityDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tipoul.Framework.StorageModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityDocument");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.LegalProfile", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.BusinessSubCategory", "BusinessSubCategory")
                        .WithMany()
                        .HasForeignKey("BusinessSubCategoryId");

                    b.HasOne("Tipoul.Framework.StorageModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Tipoul.Framework.StorageModels.User", "User")
                        .WithOne("LegalProfile")
                        .HasForeignKey("Tipoul.Framework.StorageModels.LegalProfile", "UserId");

                    b.HasOne("Tipoul.Framework.StorageModels.Wallet", "Wallet")
                        .WithOne("LegalProfile")
                        .HasForeignKey("Tipoul.Framework.StorageModels.LegalProfile", "WalletId");

                    b.Navigation("BusinessSubCategory");

                    b.Navigation("City");

                    b.Navigation("User");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.LegalProfileLogoHistory", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.LegalProfile", "LegalProfile")
                        .WithMany("LegalProfileLogoHistories")
                        .HasForeignKey("LegalProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LegalProfile");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.Notification", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.NotificationUser", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tipoul.Framework.StorageModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.Ticket", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.TicketMessage", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.Ticket", "Ticket")
                        .WithMany("TicketMessages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tipoul.Framework.StorageModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.TicketStatusHistory", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.Ticket", "Ticket")
                        .WithMany("TicketStatusHistories")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tipoul.Framework.StorageModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.User", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.BusinessSubCategory", "BusinessSubCategory")
                        .WithMany()
                        .HasForeignKey("BusinessSubCategoryId");

                    b.HasOne("Tipoul.Framework.StorageModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Tipoul.Framework.StorageModels.City", "JobCity")
                        .WithMany()
                        .HasForeignKey("JobCityId");

                    b.HasOne("Tipoul.Framework.StorageModels.Wallet", "Wallet")
                        .WithOne("User")
                        .HasForeignKey("Tipoul.Framework.StorageModels.User", "WalletId");

                    b.Navigation("BusinessSubCategory");

                    b.Navigation("City");

                    b.Navigation("JobCity");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.UserAvatarHistory", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.User", "User")
                        .WithMany("UserAvatarHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.UserCommertialGateWayRegisterRequestLog", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.UserTaxRequestHistory", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.User", "User")
                        .WithMany("UserTaxRequestHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.UserVerificationHistory", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.User", "User")
                        .WithMany("UserVerificationHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.UserVerificationHistoryError", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.UserVerificationHistory", "UserVerificationHistory")
                        .WithMany("UserVerificationHistoryErrors")
                        .HasForeignKey("UserVerificationHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserVerificationHistory");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.BusinessCategory", b =>
                {
                    b.Navigation("BusinessSubCategories");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.CommertialGateWay", b =>
                {
                    b.Navigation("CommertialGateWayStatuses");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.IdentityDocument", b =>
                {
                    b.Navigation("IdentityDocumentStatusHistories");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.LegalProfile", b =>
                {
                    b.Navigation("IdentityDocuments");

                    b.Navigation("LegalProfileLogoHistories");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.Ticket", b =>
                {
                    b.Navigation("TicketMessages");

                    b.Navigation("TicketStatusHistories");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.User", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("IdentityDocuments");

                    b.Navigation("LegalProfile")
                        .IsRequired();

                    b.Navigation("UserAvatarHistories");

                    b.Navigation("UserTaxRequestHistories");

                    b.Navigation("UserVerificationHistories");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.UserVerificationHistory", b =>
                {
                    b.Navigation("UserVerificationHistoryErrors");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.Wallet", b =>
                {
                    b.Navigation("CommertialGateWays");

                    b.Navigation("LegalProfile")
                        .IsRequired();

                    b.Navigation("User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
