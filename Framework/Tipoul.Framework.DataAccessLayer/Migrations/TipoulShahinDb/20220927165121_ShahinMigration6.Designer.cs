// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tipoul.Framework.DataAccessLayer;

namespace Tipoul.Framework.DataAccessLayer.Migrations.TipoulShahinDb
{
    [DbContext(typeof(TipoulShahinDbContext))]
    [Migration("20220927165121_ShahinMigration6")]
    partial class ShahinMigration6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.5.21301.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tipoul.Framework.StorageModels.AccountBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountBalances");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.AccountBalanceResponce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountBalanceId")
                        .HasColumnType("int");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AvailableBalance")
                        .HasColumnType("bigint");

                    b.Property<long>("EffectiveBalance")
                        .HasColumnType("bigint");

                    b.Property<string>("ErrorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TransactionTime")
                        .HasColumnType("bigint");

                    b.Property<string>("UUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountBalanceId")
                        .IsUnique();

                    b.ToTable("AccountBalanceResponces");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.AccountStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountStatements");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.AccountStatementList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountStatementResponceId")
                        .HasColumnType("int");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Credit")
                        .HasColumnType("bigint");

                    b.Property<long>("Debit")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatementStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionTrace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountStatementResponceId");

                    b.ToTable("AccountStatementList");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.AccountStatementResponce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountStatementId")
                        .HasColumnType("int");

                    b.Property<string>("ErrorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TransactionTime")
                        .HasColumnType("bigint");

                    b.Property<string>("UUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountStatementId")
                        .IsUnique();

                    b.ToTable("AccountStatementResponces");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Babat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepositDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationBank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmsPass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransferID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransferType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WithdrawDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.TransferResponce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("DestinationAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationBank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceBank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TraceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TransactionTime")
                        .HasColumnType("bigint");

                    b.Property<int>("TransferId")
                        .HasColumnType("int");

                    b.Property<string>("TransferType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TransferId")
                        .IsUnique();

                    b.ToTable("TransferResponces");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.AccountBalanceResponce", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.AccountBalance", "AccountBalance")
                        .WithOne("AccountBalanceResponce")
                        .HasForeignKey("Tipoul.Framework.StorageModels.AccountBalanceResponce", "AccountBalanceId");

                    b.Navigation("AccountBalance");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.AccountStatementList", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.AccountStatementResponce", "AccountStatementResponce")
                        .WithMany("AccountStatementLists")
                        .HasForeignKey("AccountStatementResponceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountStatementResponce");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.AccountStatementResponce", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.AccountStatement", "AccountStatement")
                        .WithOne("AccountStatementResponce")
                        .HasForeignKey("Tipoul.Framework.StorageModels.AccountStatementResponce", "AccountStatementId");

                    b.Navigation("AccountStatement");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.TransferResponce", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.Transfer", "Transfer")
                        .WithOne("TransferResponce")
                        .HasForeignKey("Tipoul.Framework.StorageModels.TransferResponce", "TransferId");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.AccountBalance", b =>
                {
                    b.Navigation("AccountBalanceResponce")
                        .IsRequired();
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.AccountStatement", b =>
                {
                    b.Navigation("AccountStatementResponce")
                        .IsRequired();
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.AccountStatementResponce", b =>
                {
                    b.Navigation("AccountStatementLists");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.Transfer", b =>
                {
                    b.Navigation("TransferResponce")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
