// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tipoul.Framework.DataAccessLayer;
using Tipoul.Framework.ShahinService.DataAccessLayer;

namespace Tipoul.Framework.DataAccessLayer.Migrations.TipoulShahinDb
{
    [DbContext(typeof(TipoulShahinDbContext))]
    [Migration("20220926194043_ShahinMigration")]
    partial class ShahinMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.5.21301.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tipoul.Framework.StorageModels.AccountBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountBalances");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.AccountBalanceResponce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountBalanceId")
                        .HasColumnType("int");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AvailableBalance")
                        .HasColumnType("bigint");

                    b.Property<long>("EffectiveBalance")
                        .HasColumnType("bigint");

                    b.Property<long>("ErrorCode")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TransactionTime")
                        .HasColumnType("bigint");

                    b.Property<string>("UUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountBalanceId")
                        .IsUnique();

                    b.ToTable("AccountBalanceResponces");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.AccountBalanceResponce", b =>
                {
                    b.HasOne("Tipoul.Framework.StorageModels.AccountBalance", "AccountBalance")
                        .WithOne("AccountBalanceResponce")
                        .HasForeignKey("Tipoul.Framework.StorageModels.AccountBalanceResponce", "AccountBalanceId");

                    b.Navigation("AccountBalance");
                });

            modelBuilder.Entity("Tipoul.Framework.StorageModels.AccountBalance", b =>
                {
                    b.Navigation("AccountBalanceResponce")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
